{"version":3,"sources":["three-orbit-controls.js"],"names":["initScene","scene","THREE","Scene","camera","PerspectiveCamera","WIDTH","HEIGHT","position","z","renderer","WebGLRenderer","antialias","setClearColor","BG_COLOR","setPixelRatio","PIXEL_RATIO","setSize","container","document","getElementById","appendChild","domElement","controls","OrbitControls","enableDamping","dampingFactor","rotateSpeed","enableZoom","enablePan","add","directionalLightlight","DirectionalLight","ambientLight","AmbientLight","walls","Mesh","BoxGeometry","MeshBasicMaterial","wireframe","color","geometry","ConeGeometry","rotateX","Math","PI","material","MeshPhongMaterial","i","BOID_COUNT","boid","boids","Boid","x","random","y","velocity","fish","loop","update","render","requestAnimationFrame","length","move","copy","aimP","Vector3","lookAt","updateScene","visible","props","showWalls","scale","set","xRange","yRange","zRange","updateSize","window","innerWidth","innerHeight","devicePixelRatio","aspect","updateProjectionMatrix","this","acceleration","cohesion","separation","alignment","avoidWalls","limitVelocity","MAX_VELOCITY","normalize","multiplyScalar","count","positionSum","distance","distanceTo","NEIGHBOR_RADIUS","divideScalar","sub","COHESION_MULTIPLIER","separationSum","SEPARATION_RADIUS","subVectors","SEPARATION_MULTIPLIER","velocitySum","ALIGNMENT_MULTIPLIER","avoid","obstacle","v","distanceToSquared","X_RANGE","Y_RANGE","Z_RANGE","WALLS_MULTIPLIER","neighborRadius","separationRadius","onresize"],"mappings":"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","file":"../src/js/three-orbit-controls.min.js","sourcesContent":["/********************************************\nfish bowl orbit control js\n*********************************************/\nvar Boid = function() {\n    this.position = new THREE.Vector3();\n    this.velocity = new THREE.Vector3();\n    this.acceleration = new THREE.Vector3();\n  \n    this.move = function(boids) {\n        this.acceleration.add(this.cohesion(boids));\n        this.acceleration.add(this.separation(boids));\n        this.acceleration.add(this.alignment(boids));\n        this.acceleration.add(this.avoidWalls());\n        this.velocity.add(this.acceleration);\n        this.acceleration.set(0, 0, 0);\n        this.limitVelocity();\n        this.position.add(this.velocity);\n    }\n  \n    this.limitVelocity = function() {\n        if (this.velocity.length() > Boid.MAX_VELOCITY) {\n            this.velocity.normalize().multiplyScalar(Boid.MAX_VELOCITY);\n        }\n    }\n  \n    this.cohesion = function(boids) {\n        var count = 0;\n        var positionSum = new THREE.Vector3();\n    \n        for (var i = 0; i < boids.length; i++) {\n            var distance = boids[i].position.distanceTo(this.position);\n    \n                if (distance > 0 && distance <= Boid.NEIGHBOR_RADIUS) {\n                    positionSum.add(boids[i].position);\n                    count++;\n                }\n        }\n        if (count > 0) {\n            var averagePosition = positionSum.divideScalar(count);\n            return averagePosition.sub(this.position).multiplyScalar(Boid.COHESION_MULTIPLIER);\n        }\n        return new THREE.Vector3();\n    }\n  \n  \n    this.separation = function(boids) {\n        var count = 0;\n        var separationSum = new THREE.Vector3();\n        var separation = new THREE.Vector3();\n    \n        for (var i = 0; i < boids.length; i++) {\n            var distance = boids[i].position.distanceTo(this.position);\n    \n            if (distance > 0 && distance <= Boid.SEPARATION_RADIUS) {\n            separation.subVectors(this.position, boids[i].position);\n            separation.normalize();\n            separation.divideScalar(distance);\n            separationSum.add(separation);\n            count++;\n            }\n        }\n        return separationSum.multiplyScalar(Boid.SEPARATION_MULTIPLIER);\n    }\n  \n    this.alignment = function(boids) {\n        var count = 0;\n        var velocitySum = new THREE.Vector3();\n    \n        for (var i = 0; i < boids.length; i++) {\n            var distance = boids[i].position.distanceTo(this.position);\n    \n                if (distance > 0 && distance <= Boid.NEIGHBOR_RADIUS) {\n                    velocitySum.add(boids[i].velocity);\n                    count++;\n                }\n        }\n        if (count > 0) {\n            var averageVelocity = velocitySum.divideScalar(count);\n            return averageVelocity.multiplyScalar(Boid.ALIGNMENT_MULTIPLIER);\n        }\n        return new THREE.Vector3();\n    }\n  \n    this.avoid = function(obstacle) {\n        var v = new THREE.Vector3();\n        v.subVectors(this.position, obstacle);\n        v.multiplyScalar(1 / (4*this.position.distanceToSquared(obstacle)));\n        return v;\n    }\n  \n    this.avoidWalls = function() {\n        var v = new THREE.Vector3();\n    \n        v.add(this.avoid(new THREE.Vector3(-Boid.X_RANGE, this.position.y, this.position.z)));\n        v.add(this.avoid(new THREE.Vector3( Boid.X_RANGE, this.position.y, this.position.z)));\n    \n        v.add(this.avoid(new THREE.Vector3(this.position.x, -Boid.Y_RANGE, this.position.z)));\n        v.add(this.avoid(new THREE.Vector3(this.position.x,  Boid.Y_RANGE, this.position.z)));\n    \n        v.add(this.avoid(new THREE.Vector3(this.position.x, this.position.y, -Boid.Z_RANGE)));\n        v.add(this.avoid(new THREE.Vector3(this.position.x, this.position.y,  Boid.Z_RANGE)));\n    \n        return v.multiplyScalar(Boid.WALLS_MULTIPLIER);\n    }\n}\n  \n  \n// Static props & functions\nBoid.NEIGHBOR_RADIUS;\nBoid.SEPARATION_RADIUS;\nBoid.MAX_VELOCITY = 0.4;\nBoid.X_RANGE;\nBoid.Y_RANGE;\nBoid.Z_RANGE;\nBoid.COHESION_MULTIPLIER;\nBoid.SEPARATION_MULTIPLIER;\nBoid.ALIGNMENT_MULTIPLIER;\nBoid.WALLS_MULTIPLIER;\n  \n  \n  \nBoid.update = function(props) {\n    Boid.NEIGHBOR_RADIUS = props.neighborRadius;\n    Boid.SEPARATION_RADIUS = props.separationRadius;\n    Boid.COHESION_MULTIPLIER = props.cohesion;\n    Boid.SEPARATION_MULTIPLIER = props.separation;\n    Boid.ALIGNMENT_MULTIPLIER = props.alignment;\n    Boid.WALLS_MULTIPLIER = props.avoidWalls;\n  \n    Boid.X_RANGE = props.xRange;\n    Boid.Y_RANGE = props.yRange;\n    Boid.Z_RANGE = props.zRange;\n}\n  \n  \n  \n  \n  \n  \n  \nvar scene, renderer, camera, controls;\n  \nvar WIDTH = window.innerWidth,\n    HEIGHT = window.innerHeight,\n    PIXEL_RATIO = window.devicePixelRatio || 1;\n  \nvar BG_COLOR = 0x111c2d;\n\nprops = new function() {\n    this.neighborRadius = 13;\n    this.separationRadius = 16;\n    this.cohesion = 0.1;\n    this.separation = 0.4;\n    this.alignment = 0.1;\n    this.avoidWalls = 1;\n    this.showWalls = false;\n    this.xRange = 60;\n    this.yRange = 50;\n    this.zRange = 60;\n}\n\n\nvar BOID_COUNT = 80;\nvar walls, boid, boids = [], fish = [];\n\nfunction initScene() {\n    scene = new THREE.Scene();\n    //scene.fog = new THREE.Fog(BG_COLOR, 50, 350);\n  \n    camera = new THREE.PerspectiveCamera(15, WIDTH/HEIGHT, .1, 2000);\n    camera.position.z = 200;\n  \n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setClearColor(BG_COLOR);\n    renderer.setPixelRatio(PIXEL_RATIO);\n    renderer.setSize(WIDTH, HEIGHT);\n  \n    container = document.getElementById('scene');\n    container.appendChild(renderer.domElement);\n  \n    controls = new THREE.OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.1;\n    controls.rotateSpeed = 0.15;\n    controls.enableZoom = false;\n    controls.enablePan = false;\n  \n    scene.add(camera);\n  \n    var directionalLightlight = new THREE.DirectionalLight( 0xFFFFFF, 1 );\n    var ambientLight = new THREE.AmbientLight( 0x888888 ); // soft white light\n  \n    scene.add(directionalLightlight);\n    scene.add(ambientLight);\n  \n    walls = new THREE.Mesh(\n        new THREE.BoxGeometry(1, 1, 1),\n        new THREE.MeshBasicMaterial({ wireframe: true, color: 0xaaaaaa }));\n  \n    scene.add(walls)\n  \n    var geometry = new THREE.ConeGeometry(0.5, 2, 6);\n    geometry.rotateX(Math.PI/2);\n    var material = new THREE.MeshPhongMaterial({ color: 0x2FA1D6 });\n  \n    for (var i = 0; i < BOID_COUNT; i++) {\n        boid = boids[i] = new Boid();\n    \n        boid.position.x = Math.random() * 100 - 50;\n        boid.position.y = Math.random() * 100 - 50;\n        boid.position.z = Math.random() * 100 - 50;\n        boid.velocity.x = Math.random() * 2 - 1;\n        boid.velocity.y = Math.random() * 2 - 1;\n        boid.velocity.z = Math.random() * 2 - 1;\n        fish[i] = new THREE.Mesh(geometry, material);\n    \n        scene.add(fish[i]);\n    }\n  \n    loop();\n}\n  \nfunction loop() {\n    controls.update();\n    render();\n  \n    requestAnimationFrame(loop);\n}\n  \nfunction render() {\n    for (var i = 0; i < boids.length; i++) {\n        boid = boids[i];\n        boid.move(boids);\n        fish[i].position.copy(boid.position);\n        var aimP = new THREE.Vector3();\n        aimP.copy(fish[i].position).add(boid.velocity);\n        fish[i].lookAt(aimP);\n    }\n    renderer.render(scene, camera);\n}\n  \nfunction updateScene() {\n    walls.visible = props.showWalls;\n    walls.scale.set(props.xRange*2, props.yRange*2, props.zRange*2);\n    Boid.update(props);\n}\n  \nfunction updateSize() {\n    WIDTH = window.innerWidth;\n    HEIGHT = window.innerHeight;\n    PIXEL_RATIO = window.devicePixelRatio || 1;\n    camera.aspect = WIDTH / HEIGHT;\n  \n    camera.updateProjectionMatrix();\n    renderer.setPixelRatio(PIXEL_RATIO);\n    renderer.setSize(WIDTH, HEIGHT);\n}\n  \ninitScene();\nupdateScene();\n\nwindow.onresize = updateSize;"]}